{"name": "test_question_and_answer[7-\\u0414\\u0430, \\u043e\\u0431\\u044f\\u0437\\u0430\\u0442\\u0435\\u043b\\u044c\\u043d\\u043e. \\u0412\\u0441\\u0435\\u043c \\u0441\\u0430\\u043c\\u043e\\u043a\\u0430\\u0442\\u043e\\u0432! \\u0418 \\u041c\\u043e\\u0441\\u043a\\u0432\\u0435, \\u0438 \\u041c\\u043e\\u0441\\u043a\\u043e\\u0432\\u0441\\u043a\\u043e\\u0439 \\u043e\\u0431\\u043b\\u0430\\u0441\\u0442\\u0438.]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_question_page.TestQuestionPage object at 0x718033d661a0>, driver = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e85d6eaf-2867-49c2-91e5-6c242ad8791b\")>, num = 7\nresult = 'Да, обязательно. Всем самокатов! И Москве, и Московской области.'\n\n    @allure.description('Тест проверяет, что значение ответа на вопрос соответствует ожидаемому значению')\n    @pytest.mark.parametrize(\n        'num, result',\n        [\n            (0, answer_1),\n            (1, answer_2),\n            (2, answer_3),\n            (3, answer_4),\n            (4, answer_5),\n            (5, answer_6),\n            (6, answer_7),\n            (7, answer_8),\n        ]\n    )\n    def test_question_and_answer(self, driver, num, result):\n        driver.get('https://qa-scooter.praktikum-services.ru/')\n        question_page = QuestionsPage(driver)\n>       actual_result = question_page.get_answer_text(num)\n\ntests/test_question_page.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/questions_page.py:24: in get_answer_text\n    WebDriverWait(self.driver, 20).until(expected_conditions.visibility_of_element_located(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"e85d6eaf-2867-49c2-91e5-6c242ad8791b\")>, method = <function visibility_of_element_located.<locals>._predicate at 0x718033db9bd0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:105: TimeoutException"}, "description": "Тест проверяет, что значение ответа на вопрос соответствует ожидаемому значению", "steps": [{"name": "Открываем браузер Firefox", "status": "passed", "parameters": [{"name": "driver", "value": "<selenium.webdriver.firefox.webdriver.WebDriver (session=\"e85d6eaf-2867-49c2-91e5-6c242ad8791b\")>"}], "start": 1718189031436, "stop": 1718189031436}, {"name": "Находим и кликаем по вопросу. Метод возвращает текстовое значения ответа на вопрос.", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"/home/irina/Документы/qa_python_sprint_6/venv/lib/python3.10/site-packages/allure_commons/_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"/home/irina/Документы/qa_python_sprint_6/pages/questions_page.py\", line 24, in get_answer_text\n    WebDriverWait(self.driver, 20).until(expected_conditions.visibility_of_element_located(\n  File \"/home/irina/Документы/qa_python_sprint_6/venv/lib/python3.10/site-packages/selenium/webdriver/support/wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "steps": [{"name": "Метод форматирует локатор, предоставляя возможность добавлять в конец локатора необходимое число", "status": "passed", "parameters": [{"name": "locator_1", "value": "['xpath', \".//div[@id='accordion__heading-{}']\"]"}, {"name": "num", "value": "7"}], "start": 1718189031436, "stop": 1718189031436}, {"name": "Метод форматирует локатор, предоставляя возможность добавлять в конец локатора необходимое число", "status": "passed", "parameters": [{"name": "locator_1", "value": "['xpath', \".//div[@id='accordion__panel-{}']\"]"}, {"name": "num", "value": "7"}], "start": 1718189031436, "stop": 1718189031436}], "parameters": [{"name": "num", "value": "7"}], "start": 1718189031436, "stop": 1718189051954}], "parameters": [{"name": "num", "value": "7"}, {"name": "result", "value": "'Да, обязательно. Всем самокатов! И Москве, и Московской области.'"}], "start": 1718189014729, "stop": 1718189051955, "uuid": "11eec887-763d-4a04-9965-155281f76e38", "historyId": "4a73146403f60aa2ea167d0c3cd0b3a2", "testCaseId": "acaf9c214d1bd991282b6d7845862805", "fullName": "tests.test_question_page.TestQuestionPage#test_question_and_answer", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_question_page"}, {"name": "subSuite", "value": "TestQuestionPage"}, {"name": "host", "value": "irina-IdeaPad-5-Pro-14ACN6"}, {"name": "thread", "value": "81801-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_question_page"}]}